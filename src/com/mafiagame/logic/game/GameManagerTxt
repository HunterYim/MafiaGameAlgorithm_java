1. TODO 항목 집중 구현
	1) assignJobs()
		- 가장 먼저 구체적인 직업 배정 로직을 완성해야 합니다.
		- 이 로직 없이는 실제 게임 테스트가 어렵습니다.
		- 각 직업 클래스의 인스턴스를 생성하고 규칙에 맞게 배분해야 합니다.

	2) proceedToNextPhase()
		- 정확한 게임 페이즈 순서도를 반영하여 페이즈 전환 로직을 완성해야 합니다.
 
	3) applyNightActionsAndResults()
		- 밤 능력들의 모든 상호작용(공격, 치료, 방어, 조사, 포섭, 접선 등) 결과를 종합적으로 계산하고 게임 상태에 반영하는 로직을 정교하게 구현해야 합니다.
		- 각 Job의 performNightAction에서 기록된 nightAbilityTargets와 nightResultsForPrivateConfirmation을 활용해야 합니다.
 
	4) checkWinConditions()
		- 모든 팀의 승리 조건을 정확하게 판정하는 로직을 구현해야 합니다.
		- 정치인 투표/처세 능력 관련 타입 체크
		- processDayExecutionPhase() 내부의 투표 집계 및 처세 능력 확인 시 instanceof Politician을 사용하고 있는데, 이는 괜찮은 접근입니다.
		- 다만, 더 많은 직업이 투표력에 영향을 주거나 특별한 방어 능력을 갖게 된다면, Job 클래스에 getVotePower()나 canBeSavedFromExecution(ExecutionType type) 같은 인터페이스 메서드를 두고 각 직업이 재정의하는 방식이 장기적으로 더 유연할 수 있습니다. (현재로서는 instanceof로도 충분히 작동합니다.)

2. nightResultsForPrivateConfirmation 활용 구체화
		- recordPrivateNightResult로 기록된 Object resultInfo를 processNightPrivateConfirmPhase에서 Job의 getPrivateNightResultMessage에 전달할 때,
		- Job의 하위 클래스에서 이 resultInfo를 안전하게 형변환하여 사용하는 예시 코드가 필요합니다.
		- (예: Police의 getPrivateNightResultMessage에서는 resultInfo를 Boolean으로 캐스팅하여 마피아 여부 확인)

3. 문자열 비교 지양
		- 주석으로도 언급하셨지만, voter.getJob().getJobName().equals("정치인") 같은 방식은 오타에 취약하고 유지보수가 어렵습니다.
		- instanceof나 JobType Enum을 사용하는 것이 좋습니다. (현재 instanceof로 잘 수정하셨습니다.)

4. 오류 처리 및 예외 상황
		- 사용자 입력이 예상 범위를 벗어나는 경우(예: 존재하지 않는 플레이어 번호 입력)에 대한 방어적인 코드가 더 필요할 수 있습니다.
		- getPlayerInput에서 기본적인 숫자 변환 오류는 처리하고 있지만, 선택지 범위 초과 등도 고려하면 좋습니다.
		
		
		
		
		
		
2025-07-02
GameManager 생성자 확인 중
 - 현재 dayCount의 초기화 값 확인 필요 -> 완료
		
		
		
2025-07-02
 - enums 제미나이에게 전달 필요
 - 각 기능별 ptivate 메서드 실행 하여 밤 능력 결과 집계 확인 필요
